[
  {
    "id": "serialization",
    "title": "Better Serialization Support",
    "img": "guille-serialization.jpeg",
    "supervisors": [
      "Guillermo Polito"
    ],
    "description": "This project aims at redesigning the textual and binary serialization support. Pharo has several textual serialization mechanisms (printOn, displayOn, storeOn, STON), and pickle binary format using Fuel.  Some of them are non-working or require a lot of manual work, and some of them are inefficient. Most of them repeat some code and can be replaced with another.",
    "goal": "- Replace the storeOn mechanism with STON literal serialization (see [pharo #3319](https://github.com/pharo-project/pharo/issues/3319))\n- Review the displayOn mechanism\n- Improve the printOn mechanism to not block on long print strings\n- Improve serialization of methods and block closures\n- Improve the performance of Fuel serialization with an improved identity hash table",
    "keywords": [
      "Serialization"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Refactoring",
        "OOP"
      ],
      "preferred": []
    }
  },
  {
    "id": "code-completion",
    "title": "Better Code Completion for Pharo using AI",
    "img": "guille-completion.jpeg",
    "supervisors": [
      "Stephane Ducasse",
      "Guillermo Polito"
    ],
    "description": "The goal of this project is to experiment with machine learning in the context of the automatic code completion of Pharo.",
    "goal": "To achieve this goal the student will\n- study [Byte Pair encoder](https://youtu.be/HEikzVL-lZU)\n- enhance the [naive implementation](https://github.com/Ducasse/BytePairEncoder)\n- study the extensible completion Framework in Pharo\n\nHe will then run some experiments building “characters” (a character in BPE can be the concatenation of multiple character)\nusing various Pharo information:\n- only the method signature\n- taking into account all the method bodies of Pharo method.\n\nBased on these databases of sequences the student will build some simple benchmarchs to be able to evaluate \nthe best strategies. He will use some industrial case studies to identify key configurations of the completion frameworks.\n\nOther tokenizers may be studied as well\n- [Unigram Tokenization](https://youtu.be/TGZfZVuF9Yc) \n- [WordPiece Tokenization](https://youtu.be/qpv6ms_t_1A)",
    "keywords": [
      "AI",
      "Machine Learning",
      "NLP",
      "Completion"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": []
    }
  },
  {
    "id": "polymath-architecture",
    "title": "Improve the architecture of PolyMath",
    "img": "cyril-polymath.png",
    "supervisors": [
      "Cyril Ferlicot-Delbecque",
      "Oleksandr Zaitsev"
    ],
    "description": "PolyMath is a mathematical library in Pharo that implements various algorithms and data structure for algebra, matrix-vector operations, numerical analysis, differential equations, etc. It is similar to  NumPy and SciPy in Python or SciRuby in Ruby. \n\nThe goal of this project is to improve the overall quality of the PolyMath library in term of architecture and API. This includes improving the internal dependencies of PolyMath to make it more modular, proposing a more intuitive and unified API for the existing algorithms.\n\nStudents will also be encouraged to implement new algorithms for PolyMath or to create tutorials and blog posts for the existing ones. The PolyMath library has a very dynamic community so students will receive a lot of feedback and guidance to help them complete this project.",
    "goal": "- A more modular system\n- Cleaner dependencies\n- Improved API\n- Documentation\n- New algebra algorithms",
    "keywords": [
      "Math",
      "Algebra",
      "Infrastructure",
      "API"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo"
      ],
      "preferred": [
        "Be comfortable with math"
      ]
    }
  },
  {
    "id": "object-detection",
    "title": "Enhancing Cormas with Computer Vision",
    "img": "etienne-cv.png",
    "supervisors": [
      "Etienne Delay",
      "Oleksandr Zaitsev"
    ],
    "description": "[Cormas](https://github.com/cormas/cormas) is an open-source modeling and multi-agent simulation platform implemented in Pharo and dedicated for management of renewable natural resources. The novelty of Cormas is in its orientation towards the [Companion Modelling](https://www.commod.org/) which suggests the development of interactive games that facilitate the collaborative exploration of scenarios by scientists and local stakeholders.\n\nThe goal of this project is to enhance the interactive functionality of Cormas by building a computer vision system for detecting tangible objects such as board game pieces. Such a system would permit people to play a [serious game](https://en.wikipedia.org/wiki/Serious_game) on a physical board and have a camera detect the movement of pieces and automatically update the Cormas model. The game could then be stored, replayed, interacted with, and analysed using Cormas.\n\nObject detection can be implemented based on the smartphone camera or with a more advanced dedicated tool such as [Azure Kinect](https://azure.microsoft.com/en-us/products/kinect-dk/). Adaptation of Cormas platform for receiving live input from real world is a very important aspect of this project.",
    "goal": "- Implement and test the API in Cormas for positioning agents on the spatial grid\n- Implement a prototype of an object detection system using computer vision\n- Connect the implemented object detection system to Cormas\n- Implement calibration and board initialization",
    "keywords": [
      "Computer Vision",
      "Machine Learning",
      "AI",
      "Agent-Based Modeling"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Pharo",
        "Machine Learing"
      ],
      "preferred": [
        "Open CV",
        "Cormas"
      ]
    }
  },
  {
    "id": "ui-builder",
    "title": "A Pharo User-Interface Builder",
    "img": "hernan-builder.jpg",
    "supervisors": [
      "Hernan Morales",
      "Sebastian Jordan"
    ],
    "description": "Implement a designer application to develop graphical user interfaces (GUI) in Pharo. This will allow Pharo developers to build product functionality and focus on design instead of writing repetitive UI code and manually composing the UI layout. Widgets will be selected and dragged from a components tree, customized on a style pane, and the UI code will be generated. The tool will use Spec 2 (a framework in Pharo for describing user interfaces), and PCG (a Pharo Code Generator which allows AST manipulation). The emmited source code should be used to rebuild the user interface, including generation of event triggers, in the designer.",
    "goal": "The GUI designer will be able to recreate UI designs from generated code, for post-edition and re-generation.",
    "keywords": [
      "UI",
      "Design",
      "Builder"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Pharo",
        "AST"
      ],
      "preferred": [
        "Code Generation",
        "AST Manipulation"
      ]
    }
  },
  {
    "id": "chart-library",
    "title": "Chart library for pharo",
    "img": "milton-chart.png",
    "supervisors": [
      "Milton Mamani Torres",
      "Oleksandr Zaitsev"
    ],
    "description": "Charts like scatter plot, bar plot, histogram, line plot and combined plots are essential for any ecosystem. You have to create a nice usable readable and extensible chart library that users of Pharo can use it for their projects, replacing the chart library of Roassal3-Charts  ",
    "goal": "- Student will contribute with Pharo ecosystem.\n- A chart library that people can use and extend",
    "keywords": [
      "Chart",
      "Roassal",
      "Data Visualization",
      "Plots"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo"
      ],
      "preferred": [
        "Desire to Learn"
      ]
    }
  },
  {
    "id": "dds-binding",
    "title": "DDS Binding for Pharo",
    "img": "santi-dds.jpeg",
    "supervisors": [
      "Santiago Bragagnolo"
    ],
    "description": "ROS 2 is taking over the ROS Project. With this, many of our robotic implementations in Pharo will become obsolete. ROS2 uses an entirely different means of communication from ROS1. To enable ROS2 robotic development in Pharo, we need to provide bindings to at least one Data Delivery Service (DDS) system used by ROS. The project includes quickly analysing the three DDS vendors supported by ROS: eProsima, Eclipse Cyclone and Gurum Networks. Choose one of them, and implement the required bindings in Pharo to enable the communication.",
    "goal": "- A Pharo binding library to at least one DDS implementation\n- Tests",
    "keywords": [
      "DDS",
      "ROS",
      "Pharo",
      "Robotics"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Network",
        "FFI",
        "Pharo",
        "TDD"
      ],
      "preferred": [
        "ROS",
        "Distributed System Programming"
      ]
    }
  },
  {
    "id": "test-coverage-visualization",
    "title": "Improving Test Coverage Visualization Tools",
    "img": "juanpablo-coverage.png",
    "supervisors": [
      "Juan Pablo Sandoval",
      "Alison Fernandez",
      "Geraldine Galindo"
    ],
    "description": "This projects targets to improve the Pharo test coverage tool by\n1. providing a visual support to display the code coverage and\n2. improving the usability of the tool.\n\n\n",
    "goal": "- A visual reusable component that shows the code coverage of a Pharo method;\n- Integrate this component with the standard Pharo testing tool;\n- Fix and improve a number of components of the Pharo testing tool to improve their usability.",
    "keywords": [
      "Testing",
      "Code Coverage",
      "UI"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP"
      ],
      "preferred": [
        "Spec2"
      ]
    }
  },
  {
    "id": "eclipse-lsp",
    "title": "Eclipse-LSP in Pharo",
    "img": "nicolas-ide.png",
    "supervisors": [
      "Nicolas Anquetil",
      "Benoit Verhaeghe"
    ],
    "description": "The Language Server Protocol (LSP) defines the protocol used between an editor or IDE and a language server that provides language features like auto complete or rule violations (see picture). There is an initial implementation of LSP in Pharo. We are looking at making it work with the Eclipse SLP client plugin. This will involve straightening the existing SLP implementation (writing tests) and understand how Eclipse SLP plugin work.",
    "goal": "- A better SLP implementation in Pharo (more robust, with tests)\n- a better comprehension of how Eclipse SLP plugin works and what can be done with it",
    "keywords": [
      "Language Server Protocol",
      "Pharo",
      "Eclipse"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Meta Programming",
        "Eclipse Plugin"
      ],
      "preferred": [
        "Pharo"
      ]
    }
  },
  {
    "id": "refactoring",
    "title": "Refactoring Improvements",
    "img": "guille-refactoring.png",
    "supervisors": [
      "Guillermo Polito",
      "Nahuel Palumbo",
      "Sebastian Jordan"
    ],
    "description": "This project is to improve the refactoring support in its model and GUI.\nThis includes cleaning up unwanted dependencies (see [pharo #2264](https://github.com/pharo-project/pharo/issues/2264)), redesigning the changes log model (see [pharo #3165](https://github.com/pharo-project/pharo/issues/3165)), redesigning the changes factory (see [pharo #3173](https://github.com/pharo-project/pharo/issues/3173))",
    "goal": "A new GUI workflow using less pop-up chains for the more common refactorings:\n - rename\n - push\/pull up\/down\n - inline\/replace senders\n - add\/remove argument\n\nFix issues: \n- [pharo #2264](https://github.com/pharo-project/pharo/issues/2264)\n- [pharo #3165](https://github.com/pharo-project/pharo/issues/3165)\n- [pharo #3173](https://github.com/pharo-project/pharo/issues/3173)",
    "keywords": [
      "Refactoring",
      "Redesign",
      "GUI Workflow"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "GUI Design",
        "Refactoring"
      ],
      "preferred": [
        "OOP"
      ]
    }
  },
  {
    "id": "ide-improvements",
    "title": "IDE improvements",
    "img": "guille-ide.jpeg",
    "supervisors": [
      "Guillermo Polito",
      "Nahuel Palumbo"
    ],
    "description": "Improve several IDE and text editor capabilities, such as shortcut navigation, text drag n drop, better parenthesis support, and autocompletion.",
    "goal": "- Add text drag n drop support (see [pharo #2634](https://github.com/pharo-project/pharo/issues/2634))\n- Enhance parenthesis support (see [pharo #2635](https://github.com/pharo-project/pharo/issues/2635))\n- Allow enabling\/disabling tools and shortcuts (see [pharo #2649](https://github.com/pharo-project/pharo/issues/2649))\n- Add autocompletion hooks (see Autocompletion hooks: [pharo #3177](https://github.com/pharo-project/pharo/issues/3177))\n- Enhance dependency analyser precision (see Dependency analyser precision: [pharo #3470](https://github.com/pharo-project/pharo/issues/3470)).",
    "keywords": [
      "IDE",
      "Tooling",
      "Text Editor",
      "Autocompletion"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Refactoring",
        "OOP",
        "Code Analysis"
      ],
      "preferred": []
    }
  },
  {
    "id": "standard-library-api",
    "title": "Improve Standard Library APIs",
    "img": "guille-library.jpeg",
    "supervisors": [
      "Guillermo Polito",
      "Sebastian Jordan"
    ],
    "description": "The objective of this project is to improve the Pharo standard library.\nThis project includes low-level improvements in arithmetics, color APIs and collections.\nSuch changes will be backed up by benchmarks to show no performance improvements are introduced.",
    "goal": "We expect at least fixes in the following aras:\n- Collections should use better default sorting algorithms (see [pharo #2866](https://github.com/pharo-project/pharo/issues/2866))\n- Improve Color API (see [pharo #3264](https://github.com/pharo-project/pharo/issues/3264))\n- Speeding up arithmetics (see [pharo #3322](https://github.com/pharo-project/pharo/issues/3322))\n- Redesign Collection cancelled methods (see [pharo #4113](https://github.com/pharo-project/pharo/issues/4113))",
    "keywords": [
      "Redesign",
      "Optimisation",
      "Standard Library"
    ],
    "size": "Medium",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "OOP",
        "Refactoring"
      ],
      "preferred": []
    }
  },
  {
    "id": "system-and-security",
    "title": "System and Security Improvements",
    "img": "guille-security.jpeg",
    "supervisors": [
      "Guillermo Polito"
    ],
    "description": "The objective of the project is to improve system integration in standard libraries.\nFor example, the system's locale support could be improved to access the system's language, text encoding, number and date formatting. Similar improvements could be brought to sockets, zip files, downloads.",
    "goal": "We expect to solve the following issues:\n- Checksums of downloads: [pharo #3391](https://github.com/pharo-project/pharo/issues/3391)\n- Locale redesign: [pharo #3844](https://github.com/pharo-project/pharo/issues/3844)\n- Unix sockets: [pharo #4046](https://github.com/pharo-project/pharo/issues/4046)\n- Bootstrap improvements: [pharo #4269](https://github.com/pharo-project/pharo/issues/4269)",
    "keywords": [
      "System Integration",
      "Low-level"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Encodings",
        "Foreign Function Interface"
      ],
      "preferred": [
        "OOP"
      ]
    }
  },
  {
    "id": "slang-vm-transpiler",
    "title": "Pharo-to-C VM Transpiler",
    "img": "guille-slang.png",
    "supervisors": [
      "Guillermo Polito",
      "Pablo Tesone",
      "Nahuel Palumbo",
      "Sebastian Jordan"
    ],
    "description": "The objective of this project is to bring general improvements in the Pharo-to-C transpiler and VM generation framework, named Slang. Slang supports type inference, inlinings, and simple optimisations such as constant folding and propagation. Most of Slang is implemented through AST manipulations and later dumped as C code.",
    "goal": "The objective of this project is to fix some of the open issues tagged as `slang` in the [pharo-vm repository](https://github.com/pharo-project/pharo-vm):\n\n - Fixes in dispatch table translations ([pharo-vm #234](https://github.com/pharo-project/pharo-vm/issues/234))\n- asSymbol can be sent only to contants ([pharo-vm #236](https://github.com/pharo-project/pharo-vm/issues/236))\n- Inline does not always work with subexpressions ([pharo-vm #241](https://github.com/pharo-project/pharo-vm/issues/241))\n- Improve the declaration of nested structures ([pharo-vm #242](https://github.com/pharo-project/pharo-vm/issues/242))\n- Inlines do not respect type annotations ([pharo-vm #244](https://github.com/pharo-project/pharo-vm/issues/244))\n- Improve binary selector translation ([pharo-vm #246](https://github.com/pharo-project/pharo-vm/issues/246))\n- Improve variable localisation ([pharo-vm #247](https://github.com/pharo-project/pharo-vm/issues/247))\n- Improve variable renaming ([pharo-vm #429](https://github.com/pharo-project/pharo-vm/issues/429))\n- Improve block inlining ([pharo-vm #430](https://github.com/pharo-project/pharo-vm/issues/430))\n- Improve block argument inlining ([pharo-vm #432](https://github.com/pharo-project/pharo-vm/issues/432))\n- Improve translation of struct accesses inside assertions ([pharo-vm #458](https://github.com/pharo-project/pharo-vm/issues/458))",
    "keywords": [
      "Transpilation",
      "Compilation"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Compilers"
      ],
      "preferred": [
        "OOP"
      ]
    }
  },
  {
    "id": "druid-optimisation",
    "title": "Optimisations for a Meta-Compiler",
    "img": "nahue-druid.png",
    "supervisors": [
      "Nahuel Palumbo",
      "Sebastian Jordan",
      "Hernan Morales"
    ],
    "description": "This project has the objective of improving the optimisation capabilities of the Druid meta-compiler. Druid is a meta-compiler that generates Just-In-Time Compiler code from an Interpreter definition. It performs an abstract meta-interpretation to generate an SSA-based Intermediate Representation (IR); this IR is optimised and used to generate machine code. With Druid, language implementors can define their interpreters and generate a JIT Compiler from them.",
    "goal": "Implement some optimisation over Druid's IR, such as Dead Store Elimination, Class Hierarchy Analysis, and Arithmetic Operations Transformation. It is possible also to improve any already implemented optimisations such as Inline, Global Value Numbering, Loop Invariant Code Motion, etc.",
    "keywords": [
      "Optimisation",
      "SSA",
      "Compilation"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP"
      ],
      "preferred": [
        "Compilers"
      ]
    }
  },
  {
    "id": "pharo-optimisation",
    "title": "Optimising Pharo Compiler",
    "img": "nahue-opt-pharo.png",
    "supervisors": [
      "Nahuel Palumbo",
      "Sebastian Jordan"
    ],
    "description": "This is an experiment to inline Pharo methods at the bytecode level. The idea is to collect information about the methods that are called for some message sends and recompile the sender method inlining the callees. The main goal is to reduce the number of method calls in the VM and improve performance.",
    "goal": "Generate optimised bytecode for Collection's methods. It means developing a type system to collect the type info from PICs, and recompile the methods with an optimising compiler (WIP). We also want to measure the performance of this strategy.",
    "keywords": [
      "Optimisation",
      "Inline",
      "Compilation"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "OOP"
      ],
      "preferred": [
        "Compilers"
      ]
    }
  },
  {
    "id": "spatial-data",
    "title": "Classes and Methods for Spatial Data manipulation",
    "img": "etienne-gis.jpg",
    "supervisors": [
      "Etienne Delay"
    ],
    "description": "We propose to explore structure to spatial data finding a way to handle different types of geospatial data in pharo. Once the data is manipulable with our tools the goal is to develop some spatial method allowing for users to deal with spatial data. For that we will start from tools already existing in pharo like the packages : geometry, shapes, geo-json and territorial, but also in other programming languages (as r or python) in order to implement spatial methods for the community. The main objective will be first to be able to load a geojson file, to visualize it and to basic geometric operations.",
    "goal": "DSL compatible with OGS standar for spatial data manipulation",
    "keywords": [
      "Simple Feature",
      "GIS",
      "Spatial"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo"
      ],
      "preferred": [
        "GIS"
      ]
    }
  },
  {
    "id": "microdown-blog",
    "title": "A lightweigth Microdown-based Blog engine",
    "img": "stef-blog.jpeg",
    "supervisors": [
      "Stephane Ducasse"
    ],
    "description": "With Pharo 11, Microdown is now used to write books, slides, render class comments, render documentation. It is becoming a central piece for Pharo documents and documentations. The next step is to support the definition of blog. This way Pharo will be able to navigate and display another important source of information within Pharo: its own blogs. The astute reader may wonder why not using other systems for building blog because we have to have the full control on a simple blog engine that we can just deploy with Pharo. ",
    "goal": "The student will:\n- study microdown, its visitors\n- study the export to HTML \n- build some logic to summarise a blog post, a monthly sorting of blog post, a full post display\n\nWe will test this blog engine on the [Pharo Weekly blog](https://pharoweekly.wordpress.com/)\nIn a second iteration a search component will be developed.",
    "keywords": [
      "Microdown",
      "HTML",
      "Blog"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": []
    }
  },
  {
    "id": "sequence-editor",
    "title": "Sequence Viewer/Editor",
    "img": "hernan-dna.jpg",
    "supervisors": [
      "Hernan Morales",
      "Oleksandr Zaitsev"
    ],
    "description": "Implement a viewer/editor of nucleic acid or protein sequences. The viewer is used to visualize, search and analyze sequences and it should adapt its view interface depending on the sequence type. The editor features allows to modify, create, and annotate sequences. External tools could be linked to the editor to streamline a multi-step bioinformatics analysis such as MSA (Multiple Sequence Alignment), ORF finders, consensus sequence visualization, identification of homologous protein or nucleotide sequences, restriction enzyme finders, etc. The BioSmalltalk library already provides a basic language toolkit to start working with biological sequences in Pharo.",
    "goal": "The viewer/editor will establish a baseline tool to address many common workflows at biological sequences, facilitating connections with bioinformatics tools from Pharo",
    "keywords": [
      "Bioinformatics",
      "Sequence Analysis",
      "Sequence Alignments"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Bioinformatics"
      ],
      "preferred": [
        "Spec2",
        "FFI"
      ]
    }
  },
  {
    "id": "class-blueprint",
    "title": "Extending a visualization (Class Blueprint)",
    "img": "nour-blueprint.png",
    "supervisors": [
      "Nour Jihene Agouf",
      "Milton Mamani Torres"
    ],
    "description": "Class Blueprint is an interactive visualization for class analysis. The visualization is implemented under the Moose platform using Roassal for the implementation of graphical elements. The visualization displays class views independently from their hierarchies.",
    "goal": "Displaying a view of more than one visualization.",
    "keywords": [
      "Software Analysis",
      "Software Visualization",
      "Software Comprehension"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Moose"
      ],
      "preferred": [
        "Roassal"
      ]
    }
  },
  {
    "id": "data-frame",
    "title": "DataFrame",
    "img": "dataframe.png",
    "supervisors": [
      "Cyril Ferlicot-Delbecque",
      "Oleksandr Zaitsev",
      "Serge Stinckwich"
    ],
    "description": "DataFrame was introduced to Pharo during the GSoC 2017 (https://github.com/PolyMathOrg/DataFrame). The work on DataFrame continued and many new features were introduced by different contributors. However, it is still a work in progress and a huge portion of functionality that can be found in other data frame packages (e.g. R, pandas) is missing.",
    "goal": "The goal of this project is to introduce new functionality to DataFrame and write examples of applying DataFrame to real problems of Data Science (one can reproduce examples from pandas and scikit-learn documentation, as well as some examples from R-bloggers)",
    "keywords": [
      "data science",
      "data analysis",
      "dataframe",
      "tabular data",
      "statistics"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": []
    }
  },
  {
    "id": "dr-tests",
    "title": "DrTests",
    "img": "drtests.jpeg",
    "supervisors": [
      "Stephane Ducasse",
      "Nahuel Palumbo"
    ],
    "description": "DrTests is a Pharo tool that we use to run several tests cases at once.\nIt is very useful when developping because we have the power to run a selected scope of tests from different packages to control the situation of the tests.",
    "goal": "The goal is to improve DrTests, add more features to have a new version to it that will be the default Test Runner of Pharo.",
    "keywords": [
      "unit tests",
      "tools",
      "test runner"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": []
    }
  },
  {
    "id": "pca-methods",
    "title": "PCA Methods",
    "img": "pca.png",
    "supervisors": [
      "Cyril Ferlicot-Delbecque",
      "Oleksandr Zaitsev"
    ],
    "description": "Write an object-model in Pharo to provide Principal Component Analysis (PCA) variants such as Sparse PCA, Randomized PCA, Incremental PCA and Kernel PCA (Centering).\nThe PolyMath library already provides an implementation of PCA which could be used as basis for extending with.",
    "goal": "Having a solid library for doing principal component analysis",
    "keywords": [
      "pca",
      "sva",
      "dimensionality reduction"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": []
    }
  },
  {
    "id": "tensor-flow-plugin",
    "title": "TensorFlow Plugin",
    "img": "tensorflow.png",
    "supervisors": [
      "Sebastian Sastre",
      "Sebastian Jordan"
    ],
    "description": "Lets make a TensoFlow plugin (not FFI) for Pharo and unblock Pharo AI possibilities by putting it among the ones at the top of the AI pyramid! It will be C TensoFlow used by C our plugin by our C VM using the GPU silicon at its fullest. A path to mine GPU power in the most efficient way in the Smalltalk friendly and powerful way. No other bridges needed. Then all the algebra and AI Smalltalk libraries would be able to use TensoFlow like a boss.",
    "goal": "All the primitives to the TensorFlow API having at least 1 unit test for quality assurance would be the definition of done.",
    "keywords": [
      "Artificial Intelligence",
      "TensorFlow",
      "Machine Learning",
      "GPU"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Basic C",
        "Familiarity with how the Pharo VM is created",
        "Familiarity with Slang",
        "Communication skills"
      ],
      "preferred": [
        "Having done a Pharo plugin"
      ]
    }
  },
  {
    "id": "graph-libraries-integration",
    "title": "Graph libraries Integration and redesign",
    "img": "paris-graph.png",
    "supervisors": [
      "Gordana Rakic",
      "Sebastian Jordan"
    ],
    "description": "There is a graph library in Pharo implemented within PharoAI https://github.com/pharo-ai/graph-algorithms. This library provides a user with several basic graph algorithms. Separately, a graph layouting library  has implemented basic layout algorithms https://github.com/medicka/graPharo. Redesign of these libraries and their consolidation, including adding new layout algorithms  is very significant for faster progress of different Pharo projects, especially PharoAI. Finally, we would like to implement new graph theory algorithms to add them to the library.",
    "goal": "To provide a solid and validated API for those libraries. That API should accept any kind of Object that represents a graph.",
    "keywords": [
      "Graphs Algorithm",
      "Libraries",
      "API"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo"
      ],
      "preferred": [
        "Graph theory knowledge"
      ]
    }
  },
  {
    "id": "complex-network-library",
    "title": "Complex network library on top of  PharoAI graph library",
    "img": "neuralnetwork.jpg",
    "supervisors": [
      "Gordana Rakic",
      "Sebastian Jordan"
    ],
    "description": "To complement to the basic graph theory algorithm that we have, we would like to implement complex networks in Pharo. For that, we will use as a base the existing graph library in Pharo.",
    "goal": "An implementation of complex network library on top of  PharoAI graph library  https://github.com/pharo-ai/graph-algorithms",
    "keywords": [
      "Graphs Algorithm",
      "Libraries",
      "API"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo"
      ],
      "preferred": [
        "Graph theory knowledge"
      ]
    }
  },
  {
    "id": "MOOSEClones",
    "title": "Code clone detection in MOOSE",
    "img": "gordana-clones.jpg",
    "supervisors": [
      "Nicolas Anquetil",
      "Gordana Rakic",
      "Santiago Bragagnolo"
    ],
    "description": "Code clones are well known issue in software development and maintenance. Their detection is standardly an initial step in their refactoring, while lately it supports their maintenance and manipulation. A contemporary sotware analyses platform as MOOSE must support efficient and scalable clone detection and manipulation.",
    "goal": "Implement selected clone detection algorithms applicable independently of programming language and peferably for multilingual projects.",
    "keywords": [
      "tools",
      "code clones",
      "clone detection"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo",
        "Communication skills"
      ],
      "preferred": [
        "Intermediate representation",
        "meta-modeling"
      ]
    }
  },
  {
    "id": "MOOSECloneVisualisation",
    "title": "Code clones manipulation and visualization in MOOSE",
    "img": "gordana-visual-clones.png",
    "supervisors": [
      "Nicolas Anquetil",
      "Gordana Rakic"
    ],
    "description": "Code clones detection techniques provide users with a immense set of differently structured  information about detected clones where searching and usage of these information become difficult and requires further proccessing. Therefore a good representation and visualization of clone information may increase usefullness of clone detection for software developement and maintenance.",
    "goal": "Create a clone meta-model, implement clone processing and vizualization techniques.",
    "keywords": [
      "tools",
      "code clones",
      "visualisations"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo",
        "Communication skills"
      ],
      "preferred": [
        "meta-modeling"
      ]
    }
  },
  {
    "id": "SYZYGIEAPharoPortOfTidalCycles",
    "title": "SYZYGIE - A Pharo port of Tidal Cycles",
    "img": "domenico.jpg",
    "supervisors": [
      "Domenico Cipriani",
      "Nahuel Palumbo"
    ],
    "description": "Live coding, sometimes referred to as on-the-fly programming,  is an increasingly popular creative  technique for performing electronic music and arts  centred on the writing code in public and the use of interactive programming in an improvised way. [TidalCycles](https://tidalcycles.org) is the most popular live coding environment for improvising music with algorithmic patterns. Developed in 2009, it is a domain specific language embedded in Haskell which uses to generate sounds the SuperDirt engine for [SuperCollider](https://supercollider.github.io), communicating with it via the OpenSoundControl protocol; in the recent years several non-Haskell projects has focused on porting TidalCycles features, the two most successful being Vortex (for Python ) and Strudel (for Javascript) Syzygie is a package intended to port to Pharo the mini-notation for sequences used by TidalCycles, that in turn is inspired by Bernard Bel’s [Bol Processor](https://bolprocessor.org).",
    "goal": "The expected outcome is a working port with the main features of TidalCycles mini-notation using PetitParser to parse the creation, manipulation and combination of sequential patterns denoted within strings. The following goal, would be to represent in Pharo TidalCycles’ timespans (also known as arcs), patterns and events in order to store patterns not as data structure but as behaviour.",
    "keywords": [
      "live programming",
      "music"
    ],
    "size": "Medium",
    "difficulty": "Easy",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": [
        "Music theory",
        "In addition of a good knowledge of Pharo, a basic knowledge of Haskell/Python/Javascript is preferred (to be able to refer to the codebase of TidalCycles/Vortex/Strudel"
      ]
    }
  },
  {
    "id": "VirtualIoTDevices",
    "title": "Virtual Devices for PharoThings",
    "img": "gordana-iot.jpg",
    "supervisors": [
      "Oleksandr Zaitsev",
      "Gordana Rakic"
    ],
    "description": "PharoThings implements communication with a connected physical hardware or with a remote one through TelePharo when the local hardware is not available. This makes PharoThings strongly dependent on physical hardware. Elimination of this dependency might be very useful  for learning and testing purposes, while it is possible by simulation of hardware response by random actions of virtual objects playing hardware roles.",
    "goal": "Design and implement solution that provides higher availability of remote devices through TelePharo by inclusion of virtual devises when physical ones are not present.",
    "keywords": [
      "IoT",
      "TelePharo",
      "PharoThings"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo",
        "IoT",
        "Communication skills"
      ],
      "preferred": [
        "PharoThings",
        "TelePharo"
      ]
    }
  }
]
